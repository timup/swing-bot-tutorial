"""create_options_contracts_and_quotes_tables

Revision ID: 11a8299a43ee
Revises:
Create Date: 2025-05-06 16:46:27.135493

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = "11a8299a43ee"
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###

    # Create options_contracts table
    op.create_table(
        "options_contracts",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("contract_symbol", sa.String(), nullable=False),
        sa.Column("underlying_ticker", sa.String(), nullable=False),
        # Use sa.Enum for the enum type, ensure name matches model for potential native enum
        sa.Column(
            "option_type",
            sa.Enum("call", "put", name="optiontype_enum"),
            nullable=False,
        ),
        sa.Column("expiration_date", sa.Date(), nullable=False),
        sa.Column("strike_price", sa.Numeric(precision=10, scale=2), nullable=False),
        sa.Column(
            "created_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
        ),
        sa.Column(
            "updated_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("contract_symbol"),
        # Explicitly add the multi-column unique constraint
        sa.UniqueConstraint(
            "underlying_ticker",
            "expiration_date",
            "strike_price",
            "option_type",
            name="uq_option_contract_details",
        ),
    )
    # Create indexes separately for better control and readability
    op.create_index(
        op.f("ix_options_contracts_contract_symbol"),
        "options_contracts",
        ["contract_symbol"],
        unique=True,
    )
    op.create_index(
        op.f("ix_options_contracts_expiration_date"),
        "options_contracts",
        ["expiration_date"],
        unique=False,
    )
    op.create_index(
        op.f("ix_options_contracts_id"), "options_contracts", ["id"], unique=False
    )
    op.create_index(
        op.f("ix_options_contracts_underlying_ticker"),
        "options_contracts",
        ["underlying_ticker"],
        unique=False,
    )

    # Create options_quotes table
    op.create_table(
        "options_quotes",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("contract_id", sa.Integer(), nullable=False),
        sa.Column("quote_date", sa.Date(), nullable=False),
        sa.Column("open", sa.Numeric(precision=12, scale=4), nullable=True),
        sa.Column("high", sa.Numeric(precision=12, scale=4), nullable=True),
        sa.Column("low", sa.Numeric(precision=12, scale=4), nullable=True),
        sa.Column("close", sa.Numeric(precision=12, scale=4), nullable=False),
        sa.Column("volume", sa.Integer(), nullable=True),
        sa.Column("open_interest", sa.Integer(), nullable=True),
        sa.Column(
            "implied_volatility", sa.Numeric(precision=9, scale=6), nullable=True
        ),
        sa.Column("bid", sa.Numeric(precision=12, scale=4), nullable=True),
        sa.Column("ask", sa.Numeric(precision=12, scale=4), nullable=True),
        sa.Column("delta", sa.Numeric(precision=9, scale=6), nullable=True),
        sa.Column("gamma", sa.Numeric(precision=9, scale=6), nullable=True),
        sa.Column("theta", sa.Numeric(precision=9, scale=6), nullable=True),
        sa.Column("vega", sa.Numeric(precision=9, scale=6), nullable=True),
        sa.Column("rho", sa.Numeric(precision=9, scale=6), nullable=True),
        sa.Column("data_source", sa.String(), nullable=True),
        sa.Column(
            "fetched_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
        ),
        sa.ForeignKeyConstraint(
            ["contract_id"], ["options_contracts.id"], ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("id"),
        # Explicitly add the multi-column unique constraint
        sa.UniqueConstraint(
            "contract_id",
            "quote_date",
            "data_source",
            name="uq_option_quote_source_date",
        ),
    )
    # Create indexes separately
    op.create_index(
        op.f("ix_options_quotes_contract_id"),
        "options_quotes",
        ["contract_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_options_quotes_data_source"),
        "options_quotes",
        ["data_source"],
        unique=False,
    )
    op.create_index(
        op.f("ix_options_quotes_id"), "options_quotes", ["id"], unique=False
    )
    op.create_index(
        op.f("ix_options_quotes_quote_date"),
        "options_quotes",
        ["quote_date"],
        unique=False,
    )

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###

    # Drop indexes first (in reverse order of table creation)
    op.drop_index(op.f("ix_options_quotes_quote_date"), table_name="options_quotes")
    op.drop_index(op.f("ix_options_quotes_id"), table_name="options_quotes")
    op.drop_index(op.f("ix_options_quotes_data_source"), table_name="options_quotes")
    op.drop_index(op.f("ix_options_quotes_contract_id"), table_name="options_quotes")
    # Drop table
    op.drop_table("options_quotes")

    # Drop indexes
    op.drop_index(
        op.f("ix_options_contracts_underlying_ticker"), table_name="options_contracts"
    )
    op.drop_index(op.f("ix_options_contracts_id"), table_name="options_contracts")
    op.drop_index(
        op.f("ix_options_contracts_expiration_date"), table_name="options_contracts"
    )
    op.drop_index(
        op.f("ix_options_contracts_contract_symbol"), table_name="options_contracts"
    )
    # Drop table
    op.drop_table("options_contracts")

    # Drop the ENUM type if it was created (might require specific DB syntax)
    # For PostgreSQL:
    op.execute("DROP TYPE IF EXISTS optiontype_enum")

    # ### end Alembic commands ###
